#===============================================================================
# subpackage
# ----------
#
# Functions for managing subpackages
#
# Result Variables
# ^^^^^^^^^^^^^^^^
#
# The following variables will be defined for each architecture listed:
#
#    LIB_SRC_${ARCH}         : list of all MODULE_${NAME}_LIB_SRC_${ARCH} variables
#    LIB_OBJ_${ARCH}         : list of all MODULE_${NAME}_LIB_OBJ_${ARCH} variables
#    TEST_UTILS_SRC_${ARCH}  : list of all MODULE_${NAME}_TEST_UTILS_SRC_${ARCH} variables
#    TEST_UTILS_OBJ_${ARCH}  : list of all MODULE_${NAME}_TEST_UTILS_OBJ_${ARCH} variables
#
# Required Variables
# ^^^^^^^^^^^^^^^^^^
#
#    MODULE_${NAME}_LIB_SRC_${ARCH}          : the files to be included in the main library
#    MODULE_${NAME}_LIB_OBJ_${ARCH}          : the precompiled object files to be included in the main library
#    MODULE_${NAME}_TEST_UTILS_SRC_${ARCH}   : the files to be included in the test_utils library
#    MODULE_${NAME}_TEST_UTILS_OBJ_${ARCH}   : the precompiled object files to be included in the test_utils library
#
#===============================================================================

# Create a working directory
set(subpackage_work_dir ${CMAKE_BINARY_DIR}/_subpackages) # The top-level directory
mark_as_advanced(subpackage_work_dir)
mark_as_advanced(subpackage_work_path)
mark_as_advanced(SUBPACKAGE_CMAKE_INCLUDES)
file(MAKE_DIRECTORY ${subpackage_work_dir})

#===============================================================================
# subpackage_file
#
# brief: Generate a subpackage workfile
#
# usage: subpackage_file(subpackage)
#===============================================================================
function(subpackage_file package)
    file(MAKE_DIRECTORY "${subpackage_work_path}")
    file(WRITE ${SUBPACKAGE_FILENAME}
        "# Autogenerated file for the subpackage : ${package} - do not edit\n"
    )
endfunction(subpackage_file)

# Add any new device types here
set(arch_types cpu cuda fpga)

#===============================================================================
# subpackage
#
# brief: Add a subpackage
#
# usage: subpackage(module_name)
#
# detail: The package is expected to exist in the module_name subdirectory
#===============================================================================
macro(subpackage _subpackage_name)

    string(TOUPPER ${_subpackage_name} _SUBPACKAGE_NAME)

    if(NOT SUBPACKAGE_PATH)
        set(_subpackage_parent "")
        set(SUBPACKAGE_PATH "${_subpackage_name}")
        set(_subpackage_namespace "${_subpackage_name}")
    else()
        set(_subpackage_parent ${SUBPACKAGE_PATH})
        set(SUBPACKAGE_PATH "${SUBPACKAGE_PATH}/${_subpackage_name}")
        set(_subpackage_namespace "${_subpackage_namespace}::${_subpackage_name}")
    endif()

    # Manage subpackage build files and variables for working files
    set(subpackage_work_path "${subpackage_work_dir}/${SUBPACKAGE_PATH}")
    set(SUBPACKAGE_FILENAME "${subpackage_work_path}/${_subpackage_name}.cmake")
    subpackage_file("${_subpackage_name}")

    # Don't propagate working variables into subdirectories
    foreach(_arch ${arch_types})

        string(TOUPPER ${_arch} _ARCH)

        set(_tmp_lib_src_${_arch} ${LIB_SRC_${_ARCH}})
        set(_tmp_lib_obj_${_arch} ${LIB_OBJ_${_ARCH}})
        set(LIB_SRC_${_ARCH} "")
        set(LIB_OBJ_${_ARCH} "")

        set(_tmp_test_utils_src_${_arch} ${TEST_UTILS_SRC_${_ARCH}})
        set(_tmp_test_utils_obj_${_arch} ${TEST_UTILS_OBJ_${_ARCH}})
        set(TEST_UTILS_SRC_${_ARCH} "")
        set(TEST_UTILS_OBJ_${_ARCH} "")

    endforeach()

    add_subdirectory(${_subpackage_name})

    foreach(_arch ${arch_types})

        string(TOUPPER ${_arch} _ARCH)

        set(LIB_SRC_${_ARCH} ${_tmp_lib_src_${_arch}})
        set(LIB_OBJ_${_ARCH} ${_tmp_lib_obj_${_arch}})
        set(TEST_UTILS_SRC_${_ARCH} ${_tmp_test_utils_src_${_arch}})
        set(TEST_UTILS_OBJ_${_ARCH} ${_tmp_test_utils_obj_${_arch}})

        # src from submodules
        set(_mod_list_${_arch} "")
        foreach(_src ${MODULE_${_SUBPACKAGE_NAME}_LIB_SRC_${_ARCH}})
            list(APPEND _mod_list_${_arch} "${_subpackage_name}/${_src}")
        endforeach()
        list(APPEND LIB_SRC_${_ARCH} ${_mod_list_${_arch}})

        # objects from submodules
        set(_mod_list_${_arch} "")
        foreach(_obj ${MODULE_${_SUBPACKAGE_NAME}_LIB_OBJ_${_ARCH}})
            list(APPEND _mod_list_${_arch} "${_obj}")
        endforeach()
        list(APPEND LIB_OBJ_${_ARCH} ${_mod_list_${_arch}})

        # test_utils src from submodules
        set(_mod_utils_list_${_arch} "")
        foreach(_src ${MODULE_${_SUBPACKAGE_NAME}_TEST_UTILS_SRC_${_ARCH}})
            list(APPEND _mod_utils_list_${_arch} "${_subpackage_name}/test_utils/${_src}")
        endforeach()
        list(APPEND TEST_UTILS_SRC_${_ARCH} ${_mod_utils_list_${_arch}})

        # test_utils objects from submodules
        set(_mod_utils_list_${_arch} "")
        foreach(_obj ${MODULE_${_SUBPACKAGE_NAME}_TEST_UTILS_OBJ_${_ARCH}})
            list(APPEND _mod_utils_list_${_arch} "${_subpackage_name}/test_utils/${_obj}")
        endforeach()
        list(APPEND TEST_UTILS_OBJ_${_ARCH} ${_mod_utils_list_${_arch}})

    endforeach()

    # Add header install targets
    file(GLOB include_files "${_subpackage_name}/*.h")
    file(GLOB detail_files "${_subpackage_name}/detail/*.*")
    install(FILES ${include_files} DESTINATION "${INCLUDE_INSTALL_DIR}/${SUBPACKAGE_PATH}")
    install(FILES ${detail_files} DESTINATION "${INCLUDE_INSTALL_DIR}/${SUBPACKAGE_PATH}/detail")

    # Propagate the include files to the parent's SUBPACKAGE_CMAKE_INCLUDES variable
    list(APPEND SUBPACKAGE_CMAKE_INCLUDES "${SUBPACKAGE_FILENAME}")
    set(SUBPACKAGE_CMAKE_INCLUDES ${SUBPACKAGE_CMAKE_INCLUDES} PARENT_SCOPE)

    # Restore subpackage tracking variables to the parent scope
    set(SUBPACKAGE_PATH "${_subpackage_parent}")
    set(_subpackage_namespace "${_subpackage_parent}")

    set(subpackage_work_path "${subpackage_work_dir}/${SUBPACKAGE_PATH}")
    set(SUBPACKAGE_FILENAME "${subpackage_work_path}/${_subpackage_name}.cmake")

endmacro(subpackage)

#===============================================================================
# include_subpackage_files
#
# brief: Load and run all .cmake files added by subpackage(package)
#
# usage: include_subpackage_files()
#
# details: After adding multiple subpackages with subpackage(package),
#          the global variable SUBPACKAGE_CMAKE_INCLUDES will have a
#          list of all of the ${package}.cmake files, and this function
#          will then run all of them in turn
#===============================================================================
macro(include_subpackage_files)
    foreach(_dir ${SUBPACKAGE_CMAKE_INCLUDES})
        include("${_dir}")
    endforeach()
endmacro(include_subpackage_files)

#===============================================================================
# test_utils
#
# brief: Adds the test_utils subdirectory to the build and sets global
#        variables for each architecture (i.e. CPU, FPGA, etc) listed
#
# usage: test_utils()
#===============================================================================
function(test_utils)
    get_filename_component(name ${CMAKE_CURRENT_SOURCE_DIR} NAME)
    string(TOUPPER ${name} NAME)
    add_subdirectory(test_utils)
    foreach(arch ${arch_types})
        string(TOUPPER ${arch} ARCH)
        set(MODULE_${NAME}_TEST_UTILS_SRC_${ARCH}
            ${MODULE_${NAME}_TEST_UTILS_SRC_${ARCH}}
            PARENT_SCOPE
        )
    endforeach()
endfunction(test_utils)
